{"version":3,"sources":["redux/modules/article.js","redux/modules/details.js","core/Footer.js","core/Loading.js","core/DataTable.js","core/index.js","redux/modules/constants.js","redux/reducers.js","redux/cofigureStore.js","containers/index.js","Root.js","serviceWorker.js","index.js","redux/modules/actions.js","config.js"],"names":["initialState","error","request","data","state","action","type","TYPES","payload","searchArticles","query","dispatch","getState","url","API","BASE_URL","params","list","srsearch","format","Object","keys","forEach","key","requestSearchArticles","fetch","then","response","json","receiveSearchArticles","search","catch","console","log","handleSearchArticlesError","fetchDetails","prop","exintro","explaintext","titles","requestDetails","receiveDetails","pages","handleDetailsError","Footer","Date","getFullYear","antIcon","style","fontSize","spin","Loading","className","indicator","columns","title","dataIndex","render","description","dangerouslySetInnerHTML","__html","dataTime","moment","DataTable","dataSet","history","onRow","pageid","onClick","event","push","dataSource","loading","REQUEST_SEARCH_ARTICLES","REQUEST_SEARCH_ARTICLES_ERROR","RECEIVE_SEARCH_ARTICLES","REQUEST_DETAILS","REQUEST_DETAILS_ERROR","RECEIVE_DETAILS","appReducer","combineReducers","articles","articlesReducer","details","detailsReducer","rootReducer","middlewares","thunk","configureStore","createStore","composeWithDevTools","applyMiddleware","Articles","lazy","Detail","Root","store","fallback","exact","path","component","to","Boolean","window","location","hostname","match","__INITIAL_STATE__","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","err","map","item","idx"],"mappings":"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","file":"static/js/main.52419b4a.chunk.js","sourcesContent":["import * as TYPES from './constants';\r\nimport {API} from '../../config';\r\nimport {\r\n  requestSearchArticles,\r\n  receiveSearchArticles,\r\n  handleSearchArticlesError,\r\n} from './actions';\r\n\r\nconst initialState = {\r\n  error: null,\r\n  request: false,\r\n  data: null,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case TYPES.REQUEST_SEARCH_ARTICLES:\r\n      return {\r\n        ...state,\r\n        request: true,\r\n      };\r\n    case TYPES.RECEIVE_SEARCH_ARTICLES:\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n        request: false,\r\n      };\r\n    case TYPES.REQUEST_SEARCH_ARTICLES_ERROR:\r\n      return {\r\n        ...state,\r\n        error: true,\r\n        request: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const searchArticles = query => (dispatch, getState) => {\r\n  let url = API.BASE_URL;\r\n  let params = {\r\n    action: 'query',\r\n    list: 'search',\r\n    srsearch: query,\r\n    format: 'json',\r\n  };\r\n\r\n  url = url + '?origin=*';\r\n  Object.keys(params).forEach(key => {\r\n    url += '&' + key + '=' + params[key];\r\n  });\r\n\r\n  dispatch(requestSearchArticles());\r\n  try {\r\n    return fetch(url)\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        if (response && response.query) {\r\n          dispatch(receiveSearchArticles(response.query.search));\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        dispatch(handleSearchArticlesError(error));\r\n      });\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch(handleSearchArticlesError(error));\r\n  }\r\n};\r\n","import * as TYPES from './constants';\r\nimport {API} from '../../config';\r\nimport {requestDetails, receiveDetails, handleDetailsError} from './actions';\r\n\r\nconst initialState = {\r\n  error: null,\r\n  request: null,\r\n  data: null,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case TYPES.REQUEST_DETAILS:\r\n      return {\r\n        ...state,\r\n        request: true,\r\n      };\r\n    case TYPES.RECEIVE_DETAILS:\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n        request: false,\r\n      };\r\n    case TYPES.REQUEST_DETAILS_ERROR:\r\n      return {\r\n        ...state,\r\n        error: true,\r\n        request: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const fetchDetails = query => (dispatch, getState) => {\r\n  let url = API.BASE_URL;\r\n\r\n  let params = {\r\n    format: 'json',\r\n    action: 'query',\r\n    prop: 'extracts',\r\n    exintro: '',\r\n    explaintext: '',\r\n    titles: query,\r\n  };\r\n\r\n  url = url + '?origin=*';\r\n  Object.keys(params).forEach(key => {\r\n    url += '&' + key + '=' + params[key];\r\n  });\r\n\r\n  dispatch(requestDetails());\r\n  try {\r\n    return fetch(url)\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        if (response && response.query) {\r\n          dispatch(receiveDetails(response.query.pages));\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        dispatch(handleDetailsError(error));\r\n      });\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch(handleDetailsError(error));\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { Layout } from 'antd';\r\n\r\nconst Footer = () => (\r\n  <Layout.Footer>\r\n    <span>&copy; Copyright {new Date().getFullYear()}</span>\r\n  </Layout.Footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport {Spin, Icon} from 'antd';\r\n\r\nconst antIcon = <Icon type=\"loading\" style={{fontSize: 24}} spin />;\r\n\r\nconst Loading = () => (\r\n  <div className=\"loading\">\r\n    <Spin indicator={antIcon} />\r\n    Loading....\r\n  </div>\r\n);\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport {Table} from 'antd';\r\nimport moment from 'moment';\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Title',\r\n    dataIndex: 'title',\r\n  },\r\n  {\r\n    title: 'Description',\r\n    dataIndex: 'snippet',\r\n    render: description => (\r\n      <div dangerouslySetInnerHTML={{__html: description}} />\r\n    ),\r\n  },\r\n  {\r\n    title: 'Posted On',\r\n    dataIndex: 'timestamp',\r\n    render: dataTime => moment(dataTime).format('DD/MM/YYYY'),\r\n  },\r\n];\r\n\r\nconst DataTable = ({dataSet, history}) => (\r\n  <Table\r\n    columns={columns}\r\n    onRow={({pageid, title}) => ({\r\n      onClick: event => {\r\n        history.push(`/detail/${pageid}/${title}/`);\r\n      },\r\n    })}\r\n    dataSource={dataSet.data || []}\r\n    loading={dataSet.request}\r\n  />\r\n);\r\n\r\nexport default DataTable;\r\n","import Footer from './Footer';\r\nimport Loading from './Loading';\r\nimport DataTable from './DataTable';\r\n\r\nexport {Footer, Loading, DataTable};\r\n","export const REQUEST_SEARCH_ARTICLES = 'REQUEST_SEARCH_ARTICLES';\r\nexport const REQUEST_SEARCH_ARTICLES_ERROR = 'REQUEST_SEARCH_ARTICLES_ERROR';\r\nexport const RECEIVE_SEARCH_ARTICLES = 'RECEIVE_SEARCH_ARTICLES';\r\nexport const REQUEST_DETAILS = 'REQUEST_DETAILS';\r\nexport const REQUEST_DETAILS_ERROR = 'REQUEST_DETAILS_ERROR';\r\nexport const RECEIVE_DETAILS = 'RECEIVE_DETAILS';\r\n","import {combineReducers} from 'redux';\r\n\r\nimport articlesReducer from './modules/article';\r\nimport detailsReducer from './modules/details';\r\n\r\nconst appReducer = combineReducers({\r\n  articles: articlesReducer,\r\n  details: detailsReducer,\r\n});\r\n\r\nconst rootReducer = (state, action) => appReducer(state, action);\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nlet middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  middlewares.push(logger);\r\n}\r\n\r\nconst configureStore = initialState => {\r\n  const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middlewares))\r\n  );\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","import {lazy} from 'react';\r\n\r\nconst Articles = lazy(() => import('./Articles'));\r\nconst Detail = lazy(() => import('./Detail'));\r\n\r\nexport {Articles, Detail};\r\n","import React, {Suspense} from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom';\r\n\r\nimport {Loading} from './core';\r\n\r\nimport {Articles, Detail} from './containers';\r\n\r\nconst Root = ({store}) => (\r\n  <Provider store={store}>\r\n    <Router>\r\n      <Suspense fallback={<Loading />}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Articles} />\r\n          <Route exact path=\"/detail/:pageid/:title/\" component={Detail} />\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </Suspense>\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nexport default Root;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport configureStore from './redux/cofigureStore';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nconst persistedState = window.__INITIAL_STATE__;\nconst store = configureStore(persistedState);\n\nReactDOM.render(<Root store={store} />, document.getElementById('root'));\nserviceWorker.unregister();\n","import * as TYPES from './constants';\r\n\r\nexport const requestSearchArticles = () => ({\r\n  type: TYPES.REQUEST_SEARCH_ARTICLES,\r\n});\r\n\r\nexport const handleSearchArticlesError = err => ({\r\n  type: TYPES.REQUEST_SEARCH_ARTICLES_ERROR,\r\n  err,\r\n});\r\n\r\nexport const receiveSearchArticles = json => {\r\n  const data =\r\n    json &&\r\n    json.map((item, idx) => {\r\n      item.key = idx;\r\n      return item;\r\n    });\r\n  return {\r\n    type: TYPES.RECEIVE_SEARCH_ARTICLES,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const requestDetails = () => ({\r\n  type: TYPES.REQUEST_DETAILS,\r\n});\r\n\r\nexport const handleDetailsError = err => ({\r\n  type: TYPES.REQUEST_DETAILS_ERROR,\r\n  err,\r\n});\r\n\r\nexport const receiveDetails = json => ({\r\n  type: TYPES.RECEIVE_DETAILS,\r\n  payload: json,\r\n});\r\n","export const API = {\r\n  BASE_URL: 'https://en.wikipedia.org/w/api.php',\r\n};\r\n"],"sourceRoot":""}